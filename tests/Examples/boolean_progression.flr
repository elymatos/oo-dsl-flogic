// Generated F-Logic code from OO-DSL
// Module: main

// Class: Person
// Class-level signatures (inheritable)
Person[|name => \string, age => \integer, salary => \double, department => \string, isActive => \boolean, hasGoodRating => \boolean|].

// Object: TestPerson
TestPerson:Person.
TestPerson[name -> "Test User"].
TestPerson[age -> 30].
TestPerson[salary -> 50000].
TestPerson[department -> "Engineering"].
TestPerson[isActive -> \true].
TestPerson[hasGoodRating -> \true].

// Rule: SimpleAge
@!{SimpleAge} ?X:Person[isExperienced] :- ?X:Person[age -> ?V], ?V > 25.

// Rule: SimpleSalary
@!{SimpleSalary} ?X:Person[isWellPaid] :- ?X:Person[salary -> ?V], ?V > 40000.

// Rule: SimpleAnd
@!{SimpleAnd} ?X:Person[isGoodCandidate] :- ?Obj:Person[age -> ?Value] > 25 , ?Obj:Person[salary -> ?Value] > 40000.

// Rule: SimpleOr
@!{SimpleOr} ?X:Person[isSpecialCase] :- ?Obj:Person[age -> ?Value] < 25 ; ?Obj:Person[salary -> ?Value] > 80000.

// Rule: MultipleAnd
@!{MultipleAnd} ?X:Person[isQualified] :- ?Obj:Person[age -> ?Value] > 25, ?Obj:Person[salary -> ?Value] > 40000 , ?Obj:Person[isActive -> ?Value] = \true.

// Rule: MixedConditions
@!{MixedConditions} ?X:Person[isEligible] :- ?Obj:Person[isActive -> ?Value] = \true , (?Obj:Person[age -> ?Value] > 30; ?Obj:Person[salary -> ?Value] > 60000).

// Rule: ComplexNested
@!{ComplexNested} ?X:Person[isPrimeCandidate] :- ?Obj:Person[age -> ?Value] >= 25, ?Obj:Person[age -> ?Value] =< 50 , (?Obj:Person[salary -> ?Value] > 45000; ?Obj:Person[department -> ?Value] = "Engineering").
